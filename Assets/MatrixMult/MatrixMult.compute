// Each #kernel tells which function to compile; you can have many kernels
#pragma kernel CSMain

// Create a RenderTexture with enableRandomWrite flag and set it
// with cs.SetTexture
// RWTexture2D<float4> Result;

float rows;
float k;
float nThreads;

RWStructuredBuffer<int> result;
StructuredBuffer<int> A;
StructuredBuffer<int> B;

[numthreads(1,1,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    int index = id.x * rows;

    for (int row = 0; row < rows; row++) {
        int sum = 0;
        int startIndex = index + k * row;
        for (int i = 0; i < k; i++) {
            sum += A[startIndex + i] * B[i];
        }
        result[index + row] = sum;
    }
    
}
